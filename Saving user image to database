Here's a comprehensive guide for creating a new column in an existing database, setting up a PHP script for image upload, and retrieving the image based on the logged-in user.

### Step 1: Modify the Database
First, add a new column called `user_image` to the `loyal` table in your database.

```sql
ALTER TABLE loyal ADD user_image VARCHAR(255);
```

### Step 2: Create the PHP File for Image Upload

#### `upload_image.php`
This file will contain the form for uploading the image and the script for handling the upload.

```php
<?php
session_start();
include 'db_connection.php'; // File containing your database connection code

// Check if the user is logged in
if (!isset($_SESSION['user_id'])) {
    die("You need to login first.");
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $user_id = $_SESSION['user_id'];

    // Check if the form was submitted with an image or a URL
    if (isset($_FILES['image']) && $_FILES['image']['error'] == UPLOAD_ERR_OK) {
        // Image file was uploaded
        $image = $_FILES['image'];
        $image_path = 'uploads/' . basename($image['name']);
        move_uploaded_file($image['tmp_name'], $image_path);
    } elseif (isset($_POST['image_url']) && filter_var($_POST['image_url'], FILTER_VALIDATE_URL)) {
        // Image URL was provided
        $image_path = $_POST['image_url'];
    } else {
        die("Please upload an image or provide a valid URL.");
    }

    // Update the database with the image path
    $stmt = $conn->prepare("UPDATE loyal SET user_image = ? WHERE user_id = ?");
    $stmt->bind_param('si', $image_path, $user_id);
    if ($stmt->execute()) {
        echo "Image uploaded successfully.";
    } else {
        echo "Error uploading image: " . $stmt->error;
    }

    $stmt->close();
    $conn->close();
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Upload Image</title>
</head>
<body>
    <h2>Upload Image</h2>
    <form method="POST" enctype="multipart/form-data">
        <div>
            <label for="image">Choose an image to upload:</label>
            <input type="file" name="image" id="image">
        </div>
        <div>
            <label for="image_url">Or enter an image URL:</label>
            <input type="text" name="image_url" id="image_url">
        </div>
        <button type="submit">Submit</button>
    </form>
</body>
</html>
```

### Step 3: Display the Uploaded Image for the Logged-In User

#### `display_image.php`
This file will retrieve and display the image for the logged-in user.

```php
<?php
session_start();
include 'db_connection.php'; // File containing your database connection code

// Check if the user is logged in
if (!isset($_SESSION['user_id'])) {
    die("You need to login first.");
}

$user_id = $_SESSION['user_id'];

// Fetch the user's image from the database
$stmt = $conn->prepare("SELECT user_image FROM loyal WHERE user_id = ?");
$stmt->bind_param('i', $user_id);
$stmt->execute();
$stmt->bind_result($user_image);
$stmt->fetch();
$stmt->close();
$conn->close();
?>

<!DOCTYPE html>
<html>
<head>
    <title>View Image</title>
</head>
<body>
    <h2>Your Image</h2>
    <?php if ($user_image): ?>
        <img src="<?php echo htmlspecialchars($user_image); ?>" alt="User Image">
    <?php else: ?>
        <p>No image found. Please upload one.</p>
    <?php endif; ?>
</body>
</html>
```

### Step 4: Database Connection File

#### `db_connection.php`
This file will contain the code to connect to your database.

```php
<?php
$servername = "your_servername";
$username = "your_username";
$password = "your_password";
$dbname = "your_dbname";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>
```

### Summary
1. **SQL**: Add a new column `user_image` to the `loyal` table.
2. **PHP**: 
   - Create `upload_image.php` for the image upload form and handling the upload.
   - Create `display_image.php` to retrieve and display the uploaded image for the logged-in user.
   - Ensure you have a `db_connection.php` file for database connectivity.

Make sure you have proper sessions and user management in place to handle user logins and sessions securely.
